#summary Description of the implemented downvote detection algorithm
#labels Featured

= Introduction =

_For your public eyes only_

Who downvoted me? Question many times asked and asked on meta. Even though now you get a box saying: explain your downvote, I doubt it changed the common user behavior on downvotes.

Me, like other users, don't like to be downvoted (unexplained I might add), so I thought, there should be a way of figuring out who downvoted me!

It turns out there is a way, and luckily, we need only publicly available information to detect that - with a certainty of course. And this publicly and massively available information is:

= User Reputation! =

You remember the rule about if you cast a downvote, you loose 1 rep? Right! If we somehow could detect the numerical change in the reputation value we should be able to detect who was responsible! 

Of course, retrieving current user reputation values is tedious without a program, but hey, we'll always have <strike>Paris</strike> my Frontend, which is excellent at parsing question listings, user profiles (and many more pages later on). 

From there on, it was easy - in theory. The way of performing differential analysis was easy enough: snapshot current visible values, wait a minute, then snapshot again. Consequently, do a differential analysis and check for reputation changes.

The hard part was to put this entire thing into a GUI - and have proper UI behavior and features. I should add, I still don't feel the 0.74 variant is feature complete - more usability functions are required -  I feel it too when I test the application.

= But there are some drawbacks! =

I'm not naive about the fact that my differential algorithm is not 100% safe - there are some strange value change patterns occurring, but I would say, in 80% of the case, there is an obvious -1 and -2 pair of reputation change: the downvoter and the downvoted.

The technology is also in some way abusive - it queries the public listing pages of the target SO sites on every 60 seconds, and for multi-page (e.g. active page) listings, it keeps a 1 second wait between site queries - currently this configuration is hard-coded.
